.\" Automatically generated by Pandoc 2.0.6
.\"
.TH "KV_CLI" "1" "August 11, 2020" "Rai User's Manual" ""
.hy
.SH NAME
.PP
kv_cli \- Rai key value client
.SH SYNOPSIS
.PP
kv_cli [\f[I]options\f[]]
.SH DESCRIPTION
.PP
The kv_cli command attaches a shared memory segment to examine and
modify the contents.
It can display the guts of the hash entries and the value storage in
order to debug or examine it.
.PP
After starting, it will print the geometry of the memory attached or
exit with an error.
These are the options that are available after prompting for a command.
.RS
.TP
.B a key value
Append a value to key.
.RS
.RE
.RE
.RS
.TP
.B c
Print stats for all contexts.
A context has counters for different hash table operations, for example:
reads, writes, adds, drops.
.RS
.RE
.RE
.RS
.TP
.B C
Print stats for open contexts.
Print dbs opened and which contexts are attached to the db.
.RS
.RE
.RE
.RS
.TP
.B d key
Tombstone key, drop key.
Releases the value associated with the key and marks the hash entry as
dropped.
.RS
.RE
.RE
.RS
.TP
.B D seg#
Dump segment data.
The value arenas are split into segments.
Each segment can have values stored in it.
This walks the segment memory and prints the keys and sizes of the data
stored in it.
.RS
.RE
.RE
.RS
.TP
.B e key
Acquire key and `E key' to release.
Holds a lock on key, for debugging locks.
.RS
.RE
.RE
.RS
.TP
.B f{get,int,hex} pos
Print key and value string, int, hex value of hash table position.
.RS
.RE
.RE
.RS
.TP
.B g key
Print key value as a string.
.RS
.RE
.RE
.RS
.TP
.B G seg#
GC segment data.
This removes holes in the segment by moving values to the head of the
segment.
This usually occurs when a new value is allocated and the context runs
out of free segment data.
In that case, it will compact the values until there is enough space
available for the value.
.RS
.RE
.RE
.RS
.TP
.B h key
Print hex dump of key value.
.RS
.RE
.RE
.RS
.TP
.B i key
Print int value of key by converting a binary value to a integer.
.RS
.RE
.RE
.RS
.TP
.B j position
Jump to table position and list keys.
.RS
.RE
.RE
.RS
.TP
.B k [pat]
List keys matching pattern or all keys if no pattern, one page at a
time.
Use `K' to go back to the start scanning at position 0.
.RS
.RE
.RE
.RS
.TP
.B m key
Acquire and push a key to a list.
This test holding multiple locks on several keys.
If the key is held by another context, then this will fail and return a
BUSY status.
.RS
.RE
.RE
.RS
.TP
.B M
Pop and release a previously pushed key using `m'.
.RS
.RE
.RE
.RS
.TP
.B n key
Acqurie and release without assigning a value.
.RS
.RE
.RE
.RS
.TP
.B o
Print segment offsets.
This is the basic geometry that is maintained for each segment.
When a context allocates a value, it will be appended to the segment
unless it determines that compacting the segment is worthwhile.
.RS
.RE
.RE
.RS
.TP
.B s [+exp] key value
Set key to value with optional expires ttl.
.RS
.RE
.RE
.RS
.TP
.B P key value
Append value to key list.
.RS
.RE
.RE
.RS
.TP
.B r file
Read command input from file.
Use `R' to read quietly.
.RS
.RE
.RE
.RS
.TP
.B S key
Fetch value list from key.
.RS
.RE
.RE
.RS
.TP
.B t key
Tombstone key, mark the key as dropped.
.RS
.RE
.RE
.RS
.TP
.B T key
Trim key, remove value list from key.
.RS
.RE
.RE
.RS
.TP
.B u +exp key
Update key expires ttl.
.RS
.RE
.RE
.RS
.TP
.B v
Validate all keys are reachable.
This walks through the hash entries and attempts to find each key.
If a key is corrupted or a key is misplaced, this will show these
errors.
.RS
.RE
.RE
.RS
.TP
.B V
Turn on/off verbose mode.
In verbose mode, all bytes of the hash entry and message value are
displayed.
This shows the fields of the data structures in hex.
.RS
.RE
.RE
.RS
.TP
.B w db#
Switch to db number.
.RS
.RE
.RE
.RS
.TP
.B W file
Output to file.
This is useful when the value is too large to display on a terminal.
.RS
.RE
.RE
.RS
.TP
.B .
Close the output to file.
.RS
.RE
.RE
.RS
.TP
.B X
Print stats of the kv_cli context.
.RS
.RE
.RE
.RS
.TP
.B y
Scan for broken locks by checking each pid attached to the shared memory
and releasing locks of the contexts which are orphaned by dead pids.
.RS
.RE
.RE
.RS
.TP
.B z
Suspend pid.
This tests lock recovery.
.RS
.RE
.RE
.RS
.TP
.B Z
Unsuspend pid.
.RS
.RE
.RE
.RS
.TP
.B q
Quit.
.RS
.RE
.RE
.SH OPTIONS
.TP
.B \-m map
The name of map file.
A prefix file, sysv, posix indicates the type of shared memory.
The prefix sysv:raikv.shm is the default.
.RS
.RE
.SH SEE ALSO
.PP
The Rai KV source code and all documentation may be downloaded from
<https://github.com/raitechnology/raikv>.
.SH AUTHORS
Chris Anderson.
